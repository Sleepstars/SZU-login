name: Go CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Check out code
        uses: actions/checkout@v4

      - name: Run tests
        run: go test -v ./...

      - name: Test Summary
        uses: test-summary/action@v2
        if: always()
        with:
           paths: unit-tests.xml <sup>3</sup>

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: darwin
            goarch: amd64
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Check out code
        uses: actions/checkout@v4

      - name: Build binaries
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o szu-login-${{ matrix.goos }}-${{ matrix.goarch }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: szu-login-binaries-${{ matrix.goos }}-${{ matrix.goarch }}
          path: szu-login-${{ matrix.goos }}-${{ matrix.goarch }}
          
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: szu-login-binaries-linux-amd64/szu-login-linux-amd64
          asset_name: szu-login-linux-amd64
          asset_content_type: application/octet-stream
        
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: szu-login-binaries-linux-arm64/szu-login-linux-arm64
          asset_name: szu-login-linux-arm64
          asset_content_type: application/octet-stream    
        
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: szu-login-binaries-windows-amd64/szu-login-windows-amd64
          asset_name: szu-login-windows-amd64.exe
          asset_content_type: application/octet-stream
        
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: szu-login-binaries-windows-arm64/szu-login-windows-arm64
          asset_name: szu-login-windows-arm64.exe
          asset_content_type: application/octet-stream
          
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: szu-login-binaries-darwin-arm64/szu-login-darwin-arm64
          asset_name: szu-login-darwin-arm64
          asset_content_type: application/octet-stream
